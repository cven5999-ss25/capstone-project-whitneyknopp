---
title: "Emergency WASH Access for Refugees"
author:
  - name: "Whitney N Knopp"
    orcid: "0009-0008-3245-2059"
    email: "whkn2760@colorado.edu"
    affiliation:
      - name: "University of Colorado Boulder"
        department: "Department of Civil, Environmental and Architectural Engineering"
        city: "Boulder"
        state: "CO"
        country: "USA"
warnings: false
toc: true
date: today
format: html
editor: visual
---

# Introduction

\[Brief description of your project and dataset\]

# Methods

```{r load_packages}
library(unhcrwash)
library(tidyverse)
library(gt)
```

## Reading the Data

```{r reading_data}

# there are 2 wasy to read in this data because it is also a packange in R

# read data with R package
unhcrWASH_raw <- unhcrwash

# read csv from the /data path
unhcrwash_raw <- read_csv(here::here("data/raw/unhcrwash.csv"))

```

## Data Exploration Approach

```{r data_exploration}

# investigate the data imported data
head(unhcrWASH_raw)
dim(unhcrWASH_raw)
# there are 27 variables as columns and 6425 observations
# some of these variables are not very relevant: form_id, location_id, reporting_period_monthly_indicator, reporting_period_annual_indicator

# summarizing some of the data
unhcrwash_raw |> 
  filter(!is.na(country)) |> 
  group_by(country) |> 
  summarize(number_of_emergencies = n(),
            number_of_refugee_camps = n_distinct(location_name),
            total_refugee_pop = sum(refugee_pop, na.rm = TRUE),
            avg_liters_per_person_per_day = mean(liters_per_person_per_day, na.rm = TRUE)) |> 
  knitr::kable(digits = 1)

# summary of all data  
unhcrWASH_raw |> 
  filter(!is.na(country)) |> 
  group_by(country) |> 
  summarize(number_of_emergencies = n(),
            number_of_refugee_camps = n_distinct(location_name),
            total_refugee_pop = sum(refugee_pop, na.rm = TRUE),
            avg_liters_per_person_per_day = mean(liters_per_person_per_day, na.rm = TRUE)) |> 
  knitr::kable(digits = 1)

# summary of past emergencies in East Africa in the past 10 years (2015 to 2025)
eastAfrica <- c("Kenya", "Uganda", "Rwanda", "Tanzania", "Ethiopia", "Eritra", "Dijbouti", "Somalia")

# create emergency end column for year, month and date
# convert end_year into a factor
unhcrWASH_raw |> 
  separate(col = end_date, into = c("end_year", "end_month", "end_day"), sep = "-") |> 
  mutate(end_year = as.numeric(end_year)) |> 
  filter(country %in% eastAfrica, post_emergency == "Post-emergency") |> 
  filter(end_year < 2025 & end_year > 2015) |> 
  group_by(country) |> 
  summarize(number_of_emergencies = n(),
            number_of_refugee_camps = n_distinct(location_name),
            total_refugee_pop = sum(refugee_pop, na.rm = TRUE),
            avg_liters_per_person_per_day = mean(liters_per_person_per_day, na.rm = TRUE)) |> 
  knitr::kable(digits = 1)

            
```

## Initial Data Tidying

Some of the issues I encountered with the raw data, which I would like to fix with tidying include:

-   Remove any entries without country information

-   Adding an `end_year` column for analysis (this will be a factor)

-   Removing some columns that are not relevant: form_id, location_id, reporting_period_monthly_indicator, reporting_period_annual_indicator, month/day columns that come from creating an end_year column

-   Change the `country` variable type from a character to a factor

-   Add a column with the duration of the emergency

-   Some entries have a refugee population of 0 (which does not seem likely, I will change these to `NA`)

Some of this data tidying depends on the method to bring in the data. If the data is imported as an R package, the dates already exist as a date variable, but importing as a csv, they must be changed. Additionally, the dates are separated with a `-` in the data imported as an R package and with a `/` in the csv file. Because of these differences, I will use the data frame imported from the R package for simplicity.

```{r data_tidying}

# tidy data based on goals listed above
unhcrWASH_tidy <- unhcrWASH_raw |> 
  filter(!is.na(country)) |> 
  mutate(duration_emergency = as.numeric(end_date - start_date)) |> 
  separate(col = end_date, into = c("end_year", "month", "date"), sep = "-") |> 
  mutate(end_year = as.integer(end_year)) |> 
  select(-c("form_id", "location_id", "reporting_monthly", "reporting_annual", "month","date")) |> 
  relocate(duration_emergency, .after = end_year) |> 
  mutate(country = as.factor(country)) |> 
  mutate(refugee_pop = na_if(refugee_pop, 0))

# save as tidy data
write_csv(unhcrWASH_tidy, here::here("data/processed/unhcrwash_tidy.csv"))

# some of my analysis will specifically focus on the region of east Africa, I will subset data 
unhcrWASH_eastAfrica_tidy <- unhcrWASH_tidy |> 
  filter(country %in% eastAfrica)
  

```

# Results

\[This will be the core of your analysis with specific requirements\]

```{r}
#| label: fig-water-quantity-results
#| fig-cap: Water quantity for displaced people 

# this first portion of the analysis will focus on minimum water access for each emergency in East Africa in the last 10 years
# I am interested in investigating if access to water has improved over time and if there are countries that typically meet needs more or less
# I also want to see if in general, taps or handpumps provide a more appropriate amount of water

# remove outliers with IQR method
qnt <- quantile(unhcrWASH_tidy$liters_per_person_per_day, probs=c(.25, .75), na.rm = T)
iqr <- IQR(unhcrWASH_tidy$liters_per_person_per_day, na.rm = T)
lower <- qnt[1] - 1.5*iqr
upper <- qnt[2] + 1.5*iqr

#results = subset(results, results$Ecoli < upper & results$Ecoli > lower)

unhcrWASH_tidy_WQuant <- unhcrWASH_eastAfrica_tidy |> 
  subset(post_emergency == "Emergency" & 
           start_date > "2015-01-01" & 
           liters_per_person_per_day < upper & 
           liters_per_person_per_day > lower) |> 
  group_by(country) 

unhcrWASH_tidy_WQuant|> 
  ggplot() +
  geom_point(data = unhcrWASH_tidy_WQuant,
             mapping = aes(x = start_date,
                       y = liters_per_person_per_day,
                       color = country)) +
  scale_color_brewer(palette = "Accent", name = "Country") +
  theme_minimal() + 
  labs(title = "Emergency drinking water access for refugees in east Africa",
       subtitle + "In accordance with the Sphere minimum standard of 15 L/person/day",
       x = "End date of survey",
       y = "Liters per person per day") + 
  geom_hline(yintercept = 15, color = "purple")

  
```

```{r}
#| label: tab-water-quant
#| tab-cap: Portion of emergencies in east Africa with adequate water supply


# don't like this chart, its not right

unhcrWASH_tidy_WQuant |> 
  filter(!is.na(liters_per_person_per_day)) |> 
  mutate(water_quantity_adequate = when(liters_per_person_per_day > 15 ~ 1,
                                        liters_per_person_per_day < 15 ~ 0)) |> 
  group_by(country) |> 
  summarize(average_daily_per_capita_liters_water = mean(liters_per_person_per_day),
            number_emergencies_adequate_water_quantity = n()) |> 
  knitr::kable(digits = 2)


```

```{r}
#| label: fig-water-quality
#| fig-cap: Emergencies 

# i want to look at the subset of countries that have provided sufficient water and adequate water quality
 # remove lower-bound outliers; upper-bound is 100
qnt <- quantile(unhcrWASH_tidy$chlorinated_safe_water_quality, probs=c(.25, .75), na.rm = T)
iqr <- IQR(unhcrWASH_tidy$chlorinated_safe_water_quality, na.rm = T)
lower <- qnt[1] - 1.5*iqr

unhcrWASH_eastAfrica_tidy |> 
    subset(post_emergency == "Post-emergency" & 
           start_date > "2015-01-01" &
           chlorinated_safe_water_quality < 100 & 
           chlorinated_safe_water_quality > lower) |> 
  ggplot(mapping = aes(x = country,
                       y = chlorinated_safe_water_quality,
                       color = country)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 2/4) +
  labs(title = "Water quality at collection points in east African countries post-emergency",
       subtitle = "Tests meeting Sphere Standards for free Cl range of 0.2 to 2.0 mg/L and turbidity less than 5 NTU",
       x = "Country",
       y = "Percent of testing meeting standards") +
  theme_minimal() +
  theme(legend.position = "none")
  

```



# Conclusions

## Summary of Findings

## Questions and Next Steps
